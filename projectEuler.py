
# -*- coding: utf-8 -*-
from __future__ import unicode_literals
import numpy as np
import pandas as pd
import time
# from pandas import DataFrame

# print 600851475143 % 486847
#Find the sum of all the multiples of 3 or 5 below 1000.


# def multiples(start, end):
# 	interations  = int((end - 1)/ start)
# 	multiples = []
# 	for i in range(1, interations + 1):
# 		multiples.append(i * start)
# 	return multiples
# t1 = time.time()
# three =  multiples(3, 1000)
# five = multiples(5, 1000)
# result = sum(list(set(three + five)))
# # print time.time() - t1
# # print result



# #By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.


# def fib(arr):
# 	if arr[-1]  < 4000000:
# 		new = arr[-1] + arr[-2]
# 		arr.append(new)
# 		fib(arr)
# 	return arr


# def evenSums(arr):
# 	sum = 0
# 	for i in arr:
# 		if i % 2 == 0:
# 			sum += i
# 	return sum

# t1 = time.time()
# arr = [1, 2]
# fibArr = fib(arr)
# result = evenSums(fibArr)
# # print time.time() -
# # print result

# # What is the largest prime factor of the number 600851475143 ?

# def findFactors(num, originalVal):
# 	val   = (num / 2 ) + 1
# 	for x in xrange(val, -1 , -1):
# 			if x > 3:
# 				print x
# 				if originalVal % x == 0:
# 					if isPrime(x):
# 						return x
# 				if x % 2 == 0 or x % 3 == 0 :
# 					return findFactors(x, originalVal)

# def isPrime(num):
# 	print 'testing', num
# 	val  = (num / 2) + 1
# 	for x in xrange(val):
# 		if x > 1 and num % x == 0:
# 			return False
# 	return True

# # print findFactors(26, 26)


# def sieve(num):
# 	bools  = [True] * num
# 	bools[0] = bools[1] = False
# 	primes = []
# 	for (x , val) in enumerate(bools):
# 		if val and num % x == 0:
# 			print 'prime', x
# 			primes.append(x)
# 			for x in xrange(x*x, num, x):
# 				bools[x] = False
# 	return primes


# def gpf(n):
#     """
#     Find the greatest prime factor of n
#     """
#     if n < 2:
#         raise ValueError('{} does not have a prime factorization'.format(n))
#     divisor = 2
#     while n > 1:
#         if not n % divisor:
#             n /= divisor
#             divisor -= 1
#         divisor += 1
#     return divisor


# print 2 /= 20
# print gpf(10012821389)

# https://en.wikipedia.org/wiki/Sieve_of_Eratosthenes


# print primesSieve(30)


"""A palindromic number reads the same both ways. The largest palindrome made from the product of two 2-digit numbers is 9009 = 91 × 99.

Find the largest palindrome made from the product of two 3-digit numbers.



2520 is the smallest number that can be divided by each of the numbers from 1 to 10 without any remainder.

What is the smallest positive number that is evenly divisible by all of the numbers from 1 to 20?



The sum of the squares of the first ten natural numbers is,

12 + 22 + ... + 102 = 385
The square of the sum of the first ten natural numbers is,

(1 + 2 + ... + 10)2 = 552 = 3025
Hence the difference between the sum of the squares of the first ten natural numbers and the square of the sum is 3025 − 385 = 2640.

Find the difference between the sum of the squares of the first one hundred natural numbers and the square of the sum.


By listing the first six prime numbers: 2, 3, 5, 7, 11, and 13, we can see that the 6th prime is 13.

What is the 10 001st prime number?

The four adjacent digits in the 1000-digit number that have the greatest product are 9 × 9 × 8 × 9 = 5832.

73167176531330624919225119674426574742355349194934
96983520312774506326239578318016984801869478851843
85861560789112949495459501737958331952853208805511
12540698747158523863050715693290963295227443043557
66896648950445244523161731856403098711121722383113
62229893423380308135336276614282806444486645238749
30358907296290491560440772390713810515859307960866
70172427121883998797908792274921901699720888093776
65727333001053367881220235421809751254540594752243
52584907711670556013604839586446706324415722155397
53697817977846174064955149290862569321978468622482
83972241375657056057490261407972968652414535100474
82166370484403199890008895243450658541227588666881
16427171479924442928230863465674813919123162824586
17866458359124566529476545682848912883142607690042
24219022671055626321111109370544217506941658960408
07198403850962455444362981230987879927244284909188
84580156166097919133875499200524063689912560717606
05886116467109405077541002256983155200055935729725
71636269561882670428252483600823257530420752963450

Find the thirteen adjacent digits in the 1000-digit number that have the greatest product. What is the value of this product?



A Pythagorean triplet is a set of three natural numbers, a < b < c, for which,

a2 + b2 = c2
For example, 32 + 42 = 9 + 16 = 25 = 52.

There exists exactly one Pythagorean triplet for which a + b + c = 1000.
Find the product abc.





The sum of the primes below 10 is 2 + 3 + 5 + 7 = 17.

Find the sum of all the primes below two million.




The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

 1: 1
 3: 1,3
 6: 1,2,3,6
10: 1,2,5,10
15: 1,3,5,15
21: 1,3,7,21
28: 1,2,4,7,14,28
We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred divisors?

"""



