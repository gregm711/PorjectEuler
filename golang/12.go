/*
The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

 1: 1
 3: 1,3
 6: 1,2,3,6
10: 1,2,5,10
15: 1,3,5,15
21: 1,3,7,21
28: 1,2,4,7,14,28
We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred divisors?
 */

package main


import (
	"fmt"
	"math"
)

func properDivisors(n int) (divisors []int){
	divisors = []int{}
	for x := 1; x <= int(math.Sqrt(float64(n)) + 1) ; x++ {
		if n % x == 0 {
			divisors = append(divisors, x)
			divisors = append(divisors, n/x)

		}
	}
	return divisors
}


func triangleNumber(n int)  (triangle int) {
	triangle = 0
	for x:= 1; x <= n; x++ {
		triangle  = triangle +x

	}
	return triangle
}

func main () {
	factors := []int{}
	numFactors := 0
	triangle := 0
	for x := 1; x <= 100000; x++ {
		triangle = triangleNumber(x)
		factors = properDivisors(triangle)
		numFactors = len(factors)
		if numFactors >= 500 {
			fmt.Println("breaking")
			break
		}
	}
	fmt.Println(numFactors)
	fmt.Println(triangle)

}